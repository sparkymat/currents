// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package dbx

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/sparkymat/currents/internal/dbtypes"
)

type MediaItemState string

const (
	MediaItemStatePending    MediaItemState = "pending"
	MediaItemStateProcessing MediaItemState = "processing"
	MediaItemStateProcessed  MediaItemState = "processed"
	MediaItemStateFailed     MediaItemState = "failed"
)

func (e *MediaItemState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaItemState(s)
	case string:
		*e = MediaItemState(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaItemState: %T", src)
	}
	return nil
}

type NullMediaItemState struct {
	MediaItemState MediaItemState
	Valid          bool // Valid is true if MediaItemState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaItemState) Scan(value interface{}) error {
	if value == nil {
		ns.MediaItemState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaItemState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaItemState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaItemState), nil
}

type MediaItemType string

const (
	MediaItemTypeVideo   MediaItemType = "video"
	MediaItemTypeAudio   MediaItemType = "audio"
	MediaItemTypeArticle MediaItemType = "article"
)

func (e *MediaItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaItemType(s)
	case string:
		*e = MediaItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaItemType: %T", src)
	}
	return nil
}

type NullMediaItemType struct {
	MediaItemType MediaItemType
	Valid         bool // Valid is true if MediaItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaItemType) Scan(value interface{}) error {
	if value == nil {
		ns.MediaItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaItemType), nil
}

type MediaItem struct {
	ID                uuid.UUID
	UserID            uuid.UUID
	Title             string
	Url               string
	ItemType          MediaItemType
	PublishedAt       pgtype.Timestamp
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
	State             MediaItemState
	VideoFilePath     pgtype.Text
	ThumbnailFilePath pgtype.Text
	SubtitleFilePaths []string
	Transcript        pgtype.Text
	Metadata          dbtypes.JSON
}

type MediaItemTopic struct {
	ID          uuid.UUID
	MediaItemID uuid.UUID
	TopicID     uuid.UUID
	ConfirmedAt pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type SchemaMigration struct {
	Version int64
	Dirty   bool
}

type Topic struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Name        string
	Description string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

type User struct {
	ID                uuid.UUID
	Name              string
	Username          string
	EncryptedPassword string
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
}
